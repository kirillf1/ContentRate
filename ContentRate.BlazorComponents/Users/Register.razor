@using System.Text.RegularExpressions;
@using ContentRate.Application.Contracts.Users;
@using ContentRate.Application.Users;
@using ContentRate.BlazorComponents.Dialogs;
@using ContentRate.BlazorComponents.States;
@using ContentRate.ViewModels.Users;
@using FluentValidation;
@using System.Reactive.Threading.Tasks;
@inherits ReactiveComponentBase<RegisterViewModel>
@page "/register"
<div class="mt-5 d-flex justify-content-center">
    <MudPaper Class="pa-4 form-width">
        <MudText Typo="Typo.h6">Регистрация</MudText>
        <MudForm Model="RegisterViewModel" Validation="@(ValidateValue)" @ref="form"
                 @bind-IsValid="@success">
            <MudTextField OnlyValidateIfDirty="true" @bind-Value="RegisterViewModel.Name" T="string" Label="Имя пользователя"
                          For="@(()=>RegisterViewModel.Name)" />
            <MudTextField @bind-Value="RegisterViewModel.Password" T="string" Label="Пароль"
                          HelperText="Введите пароль" OnlyValidateIfDirty="true"
                          InputType="InputType.Password" For="@(()=>RegisterViewModel.Password)"
                          Required="true" RequiredError="Пароль обязателен!" />
            <MudTextField @bind-Value="RegisterViewModel.ConfirmPassword" T="string" OnlyValidateIfDirty="true"
                          Label="Повторите пароль" InputType="InputType.Password"
                          For="@(()=>RegisterViewModel.ConfirmPassword)" />
            <div class="d-flex align-center justify-space-between mt-3">
                <MudButton OnClick="@RegisterUser" Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" Class="ml-auto">Зарегистрироваться</MudButton>
            </div>
        </MudForm>
    </MudPaper>
</div>
@code {
    [Inject]
    IDialogService DialogService { get; set; } = default!;
    [Inject]
    private RegisterViewModel RegisterViewModel
    {
        get => ViewModel!;
        set => ViewModel = value;
    }
    [Inject]
    private UserAuthState UserAuthState { get; set; } = default!;
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;
    private bool success;
    private MudForm form;
    private async Task RegisterUser()
    {
        await form.Validate();
        if (!form.IsValid)
            return;
        var userModel = await RegisterViewModel.RegisterCommand.Execute().ToTask();
        if (userModel is null)
        {
            ShowErrorRegisterDialog();
            return;
        }
        UserAuthState.SetNewUser(userModel);
        NavigationManager.NavigateTo("/roomList");
    }
    private Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
    {
        var result = await RegisterViewModel.Validator.ValidateAsync(ValidationContext<RegisterViewModel>
            .CreateWithOptions((RegisterViewModel)model, x => x.IncludeProperties(propertyName)));
        if (result.IsValid)
            return Array.Empty<string>();
        return result.Errors.Select(e => e.ErrorMessage);
    };
    private void ShowErrorRegisterDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Произошла ошибка неизвестная ошибка");
        parameters.Add("Color", Color.Warning);
        DialogService.Show<NotifyResultDialog>("Попробуйте ввести другое имя или попробуйте позже");
    }
}
